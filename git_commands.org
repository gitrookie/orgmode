** Configure Git
   */etc/gitconfig* contains values for all users in the system and their repos.
   --system is used to read and write to /etc/gitconfig.

   git config --global user.name "gaurav sood"
   git config --global user.email "gaurav3184@gmail.com"

   --global option is used to read and write *~/.gitconfig* directory

   *.git/config* specific to that repo.

   Each level overrides the values in previous level.

   git config --global core.editor emacs
   git config --global merge.tool Ediff

   # to list contents of ~/.gitconfig, /etc/gitconfig file
   git config --list


** Files to version control in current folder

# To start a new project to be version controlled
   git init

# it will add all the files to the staging area (modified and untracked files)
# git will start *tracking* files.
   git add .

# it will add the specified file. Files will go to staging area. 
   git add <filename>

# files will be removed from staging area- unstaging
   git rm --cached <filename>

# To discard changes in file in working directory 
# (if the changes are not staged yet.*)
   git checkout -- <file>

# files will be commited to local repository
   git commit -m "Initial Commit"

# Status of the file
   git log
   git status comment:
   Edit the readme file
   git add
   git commit -m "Changed readme"

# Shows the difference between commited file and modified file (not yet staged)
   git diff <filename>

# Shows the difference between commited file and staged file
   git diff --cached <filename>

# remove extra details
   git log --oneline
   git log --format=raw

# commit and stage in single command
   git commit -a -m ""

# what has been modified shorthand (remove extra details)
   git status -s

# suppose we committed something to repository and later we realized that we 
# dont want that changes. Above comman will revert the changes in local 
# repository and that changes will be moved to saging area Local copy 
# will still have that changes too.
   git reset --soft HEAD^

# this command will discard any changes in local repository and copy too.
   git reset --hard HEAD^

# to unstage (git status will show again the file in red color from green)
   git reset HEAD <file>

# list all the branches present in the repository. Highlights current 
# branch we are in.
   git branch

# To switch between branches.   
   git checkout <branch_name>

# Creates a branch named iss53. When branching its better to have things clean. 
   git branch <branch_name>

# Creates a brach named <branch_name> and switches to it. 
   git checkout -b <branch_name>

# Merges <branch_name> with master
   git merge <branch_name>

# After the branch <branch_name> has been merged with master it can be 
# deleted using above command
   git branch -d <branch_name>



** Internal Commands

   git cat-file [-t -s -p] sha

** Settings for GitHub
   git remote add origin https://github.com/gitrookie/gitpoject.git
   -- gitrookie is username
   -- gitproject is name of project
   
   git push origin master
   -- push contents of master branch to repository at GitHub
   
   git push origin <branch_name>
   -- push contents of <branch_name> to repository at GitHub
   
   git clone https://github.com/gitrookie/gitpoject.git 
   -- copy the whole repository from GitHub
   
   git push origin --delete <branch_name>
   -- Delte the branch from github which has been deleted from the local repository.


** Basic Concepts

   Everything in git is checksummed before it is stored and is then refeered to 
   by checksum. (SHA-1 40 chars hexadecimal)
   Git has three main states in which your file can reside

   1. Modified: we have changed the file.
   2. Staged: a file is marked in its current version to go into next commit
      snapshot.
   3. Committed: Means data is safely stored in your database.

   Three main sections of Git Project.
   1. the Git directory
   2. the working directory
   3. staging area.

   *Git directory* is where git stores metadata and object database of your 
   project. this is copied when we clone a repository.
   *Working Directory* is one version of your project pulled out of compressed
   database in git directory.
   *Staging area* is simple file contained in Git directory that stores what
   will go to your next commit.

   *Untracked* means git sees a file which was not present in the previous
   *snapshot*(commit).

   Git repo is collection of objects and system for naming those objects called
   refs.

   1. Tree Object: mapping containig permissions, blob sha-1, filename.
   2. blob object
   3. commit object
