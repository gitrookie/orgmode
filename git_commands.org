** Configure Git
   */etc/gitconfig* contains values for all users in the system and their repos.
   --system is used to read and write to /etc/gitconfig.

   git config --global user.name "gaurav sood"
   git config --global user.email "gaurav3184@gmail.com"

   --global option is used to read and write *~/.gitconfig* directory

   *.git/config* specific to that repo.

   Each level overrides the values in previous level.

   git config --global core.editor emacs
   git config --global merge.tool Ediff

   # to list contents of ~/.gitconfig, /etc/gitconfig file
   git config --list


** Files to version control in current folder

# To start a new project to be version controlled
   git init

# it will add all the files to the staging area (modified and untracked files)
# git will start *tracking* files.
   git add .

# it will add the specified file. Files will go to staging area. 
   git add <filename>

# files will be removed from staging area- unstaging
   git rm --cached <filename>

# To discard changes in file in working directory 
# (if the changes are not staged yet.*)
   git checkout -- <file>

# files will be commited to local repository
   git commit -m "Initial Commit"

# Status of the file
   git log
   git status comment:
   Edit the readme file
   git add
   git commit -m "Changed readme"

# Shows the difference between commited file and modified file (not yet staged)
   git diff <filename>

# Shows the difference between commited file and staged file
   git diff --cached <filename>

# Shows the difference between local branch master and remote-tracking branch
# master.
   git diff master origin/master

# Shows the diff between a file on different branches
   git diff <branch1> <branch2> -- <filename>

# remove extra details
   git log --oneline
   git log --format=raw

# commit and stage in single command
   git commit -a -m ""

# what has been modified shorthand (remove extra details)
   git status -s

# Remove the specified file from staging area, but leave the working directory
# unchanged. This unstages a file
   git reset <file>

# Reset the staging area to match the most recent commit, but leave the working
# directory unchanged. This unstages all the files without overwriting any
# changes gives us the opportunity to rebuild the staged snapshot from scratch.
   git reset

# Reset the staging area and working directory to match the most recent
# commit. In addition to unstaging changes, the --hard flag tells git to
# overwrite all changes in the working directory, too.
   git reset --hard

# Move the current branch tip backward to <commit>, reset the staging area to
# match the <commit>, but leave the working directory alone. All changes made
# since <commit> will reside in the working directory., which lets you re-commit
# the project history using cleaner more atomic snapshots
   git reset <commit>

# Similar to above git reset <commit> but also resets the working directory to
# match.
   git reset --hard <commit>

# Removes Untracked files. It is equivalent to inspecting the working directory
# with git status and removing untracked files with "rm". "git reset" works only
# on tracked files.
   git clean

# suppose we committed something to repository and later we realized that we 
# dont want that changes. Above comman will revert the changes in local 
# repository and that changes will be moved to saging area Local copy 
# will still have that changes too.
   git reset --soft HEAD^

# this command will discard any changes in local repository and copy too.
   git reset --hard HEAD^

# to unstage (git status will show again the file in red color from green)
   git reset HEAD <file>

# list all the local branches present in the repository. Highlights current 
# branch we are in.
   git branch

# List all the branches (local and remote-tracking) branches.
   git branch -a

# List only remote tracking branches
   git branch -r

# To switch between local branches.
   git checkout <branch_name>

# Creates a branch named iss53. When branching its better to have things clean. 
   git branch <branch_name>

# Creates a branch named <branch_name> and switches to it. 
   git checkout -b <branch_name>

# Merges local branch <branch_name> with master
   git merge <branch_name>

# After the local branch <branch_name> has been merged with master it can be 
# deleted using above command
   git branch -d <branch_name>

# creates local branch <branch_name> which is copy of local branch master and
# checkouts <branch_name>
   git checkout -b <branch_name> master

# To update remote-tracking branch
   git fetch <branch_name>

# To work on remote-tracking branch. Following will create a local branch named
# "refactored" which will be copy of the remote-tracking branch
# "origin/refactored" 
   git checkout --track -b refactored origin/refactored

# Show various types of objects.(blob, tree, tags, commit)
   git show --pretty="format:" --name-only <sha1>



** Internal Commands

   git cat-file [-t -s -p] sha


** Settings for GitHub
   git remote add origin https://github.com/gitrookie/gitpoject.git
   -- gitrookie is username
   -- gitproject is name of project

   git push origin master
   -- push contents of master branch to repository at GitHub

   git push origin <branch_name>
   -- push contents of <branch_name> to repository at GitHub

   git clone https://github.com/gitrookie/gitpoject.git 
   -- copy the whole repository from GitHub

   git push origin --delete <branch_name>
   -- Delte the branch from github which has been deleted from the local
   repository.

# If we want to push to repo which has different name in the remote repository
# then we can do the following
   git push origin experimental:experminet-by-bob

** Basic Concepts

   Everything in git is checksummed before it is stored and is then refeered to 
   by checksum. (SHA-1 40 chars hexadecimal). Git has proprietary database.

   Git has three main states in which your file can reside

   1. Modified: we have changed the file.
   2. Staged: a file is marked in its current version to go into next commit
      snapshot.
   3. Committed: Means data is safely stored in your database.

   Three main sections of Git Project.
   1. the Git directory
   2. the working directory
   3. staging area.

   *Git directory* is where git stores metadata and object database of your 
   project. this is copied when we clone a repository.
   *Working Directory* is one version of your project pulled out of compressed
   database in git directory.
   *Staging area* is simple file contained in Git directory that stores what
   will go to your next commit.

   *Untracked* means git sees a file which was not present in the previous
   *snapshot*(commit).

   Git repo is collection of objects and system for naming those objects called
   refs.

   1. Tree Object: mapping containig permissions, blob sha-1, filename.
   2. blob object
   3. commit object

   *Head* will be pointing to one of branches

*** Branches
    There are two types of branches
    1. Local Branches
    2. Remote-tracking branches

** Git Internals
   Branches are directed acyclic graphs. Also they are name of particular commit
   and all the commits that are ancestors of it, so each branch is completely
   defined by the SHA1sum of the commit at the tip.
