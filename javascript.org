* Introduction
  JavaScript is built on some very good ideas and few bad ones.
  The very good ideas include functions, loose typing, dynamic objects and an
  expressive object literal notation.
  Javascript functions are first class objects with mostly lexical scoping.
  Javascript has a powerful obect literal notation. Objects can be created by
  simply listing their components.
  A controversial feature in javascript is *prototypal inheritance*. Javascript
  has class free object system in which object inherit directly from other
  objects.
  Javascript depends upon global variables for linkage. All the top level
  variables of all compliation units are tossed together in a common namespace
  called the global object.
  JavaScript is single threaded programming language (single threaded run time)

* Grammar
** Names
   *Names* character followed optionally by one or more characters. Names can't
   be *reserved words*.
** Numbers
   Javascript has single number type. Internally it is represented as 64 bit
   floaitng number.
** Strings
   Can be wrapped into single or double quotes. All characters are 16 bit wide.
** Statements
   A compilation unit contains set of executable statements. In web browsers
   each <script> tag delivers a compilation unit that is compiled and
   immediately executed. Lacking a linker, JavaScript throws all compilation
   unit  together in common global namespace. When used inside functions, the
   *var* statement defines functions private variables.
   Statements tend to be executed from top to bottom.

   A block is set of statements wrapped in curly braces. Unlike many other
   languages a block doesn't define new scope, so variables should be defined at
   the top of fucntion not inside blocks.
*** ~var~ Statement
    It declares a variable optionally initializing it to a value. These
    declarations are processed before any code is executed. The scope of
    variable declared with ~var~ is its current *execution context* which is
    enclosing function, or for a variable declared outside any function,
    global. 

    Assigning to an undeclared variable implicitly declares it is as a global
    variable(it becomes property of global object).

    Differences between declared and undeclared variable
    1. Declared variables are constrained in the execution context in which they
       are declared. Undeclared variables are always global.
    2. Declared variables are created before any code is executed. Undeclared
       variables don't exist until the code assigning to them is executed.
    3. Declared variables are non configurable property of their execution
       context(function or global). Undeclared variables can be configured.
** Expressions
** Literals
** Functions
* Objects
  The simple types of JavaScript are numbers, strings, booleans, null and
  undefined. All other values are *objects*. Numbers, strings and booleans are
  object like in that they have methods, but they are immutable. Objects are
  mutable keyed collections. In JavaScript arrays, functions, regular
  expressions are objects and ofcourse objects are objects.

  An *object* is a container of properties where property has a name and
  value. A property name can be string including an empty string. A property
  value can be any javascript value except for *undefined*.
** Object Property
   Object Properties are name/value pairs. A property can be enumerable,
   writable, configurable. if a value is enumerable it will show up when
   enumerating over an object using ~for (prop in obj)~ loop.
** Object Literals
   Provides convinent notation for creating new objects. An Object Literal is a
   pair of curly braces surrounding zero or more name/value pairs. An object
   literal can appear any where an expression can appear.
   The *undefined* value is produced if we try to retreive non existent property
   name.
** Prototype
   Every Object is linked to a prototype object from where it can inherit
   properties. All objects created from object literals are linked to
   Object.prototype an object that comes with JavaScript.
   When we make a new object we can select the object that should be its
   prototype.
*** Object.prototype
    It's an object like any other object with predefined properties. We can
    define a *new property on it*.
** Reflection
   It is easy to inspect an object to determine what properties it has by
   attempting to retrieve the properties and examining the value obtained. The
   *typeof* operator can be helpful in determining the type of property.
* JavaScript Event Loop
  JavaScript has a concurrency model based on an event loop. This model is quite
  different than the model in other languages like C or Java.
** Message Queue
   A JavaScript runtime contains a *message queue*, which is list of messages to
   be processed. To each message is associated a function. When the stack is
   empty, a message is taken out of the queue and processed. The *processing*
   consist of calling the associated function (and thus creating initial stack
   frame). The message processing ends with the stack becomes empty again.
   In the loop, the message queue is polled for the next message.
   The messages are queued in response to external events (such as mouse being
   clicked, receiving response to an HTTP request) given a callback function has
   been provided.
** Event Loop
   The ~event loop~ got its name because of how it is usually implemented, which
   usually resembles

   #+begin_src javascript
     while(queue.waitForMessage()) {
         queue.processNextMessage():
     }
   #+end_src

   ~queue.waitForMessage~ waits synchronously for a message to arrive if there
   is none currently.
   Event Loop looks at call stack, if it is empty looks at message queue and
   processes the message.
** Run to completely
   Each message is processed completely before any other message is
   processed. This offers some nice properties when reasoning about your
   program, including the fact that whenever a function runs , it cannot be
   preempted  and will run entirely before any other code runs (and can modify
   data the function manipulates). This differs from C, for instance, where if a
   function runs in a thread, it can be be stopped at any point to run some
   other code in another thread.

   A down side of this model is that if a message takes too long to complete,
   the web application is unable to process user interactions like click or
   scroll. The browser mitigates this with the "Script is taking too long to
   run" dialog. A good practice to follow is to make message processing short
   and if possible cut down one message into several messages.
** Adding Messages
   In browsers, *messages* are added any time an event occurs and there is an
   event listener attached to it. If there is no listener, the event is lost. So
   a click on an element with a click event handler will add a message
   --likewise with any other event.

   Calling ~setTimeout~ will add a message to the queue after the time passed as
   second argument. If there is no other message in the queue, the message is
   processed right away, however, if there are messages, the ~setTimeout~
   message will have to wait for other messages to be processed. For that reason
   the second argument indicates a minimum time and not a guaranteed time.
** Never Blocking
   The JavaScript Event Loop model never blocks. Handling I/O is typically
   performed via events and callbacks, so when the application is waiting for an
   indexed DB query, it can still process other things like user input.

* Functions
  Functions in JavaScript are objects. Objects are collection of name/value
  pairs with hidden link to prototype object. Objects produced from the object
  literals are linked to Object.prototype. Functions objects are linked to
  Function.prototype(which itself is linked to Object.Prototype).

  Every function is created with two additional properties
  1. function's context
  2. code that implements functions behavior
  
  Since functions are objects function can have methods.
** Function Literals
   Function object can be created with function literals.
   var add = function (a, b) {
       return a + b;
   };
   A function literal has four parts.
   1. first part is reserved word function. if a function is not given name it
      is said to be anonymous.
   2. second part is function name.
   3. third part is set of parameters
   4. fourth part is function body in curly braces.

   A function literal can appear anywhere an expression can appear. A function
   nested inside a function enjoys access to parameters and variables of the
   function it is nested in. This is called closure.
** Function Invocation
   In addition to declared parameters every function receives two additonal
   parameters i.e. ~this~ and ~arguments~.
   ~this~ parameter is very important in object orieneted programming and its
   value is determined by the *invocation pattern*
   There are four pattern of invocation in javascript.
   1. *Method Invocation Pattern:*
      When a function is stored as property of object we call it a method. When
      a method is invoked this is bound to that object. The binding of ~this~
      happens at invocation time. This is very late binding makes function that
      use this highly reusable. Method that get their object context from this
      are called public methods.
   2. *Function Invocation Pattern:*
      When a function is not the property of object it is invoked as
      function. When a function is invoked like this it ~this~ is bound to
      global object.
   3. *Constructor Invocation Pattern:*
      Functions that are intended to be used with ~new~ are called
      constructors. By convention constructors are kept in a variable names
      starting with capital letters. Constructors should not be called without new.
   4. *Apply Invocation Pattern:*
      The ~apply~ method lets us construct an array of arguments to use to
      invoke a function. It also lets us choose value of ~this~. The ~apply~
      method takes two parameters
      - first is value that should be bound to ~this~
      - second is array of parameters

   There is no type checking on the arguments value. any value can be passed to
   any parameter.
*** ~Arguments~ Parameters
    ~arguments~ contain all the arguments passed to function.
    ~arguments~ is not really an array. It is an array like object. arguments
    has length property but it lacks all the array methods.
*** Return
    A function always return the value if it is not specified it returns
    ~undefined~.
    If function is invoked with ~new~ prefix and return value is not an object,
    then ~this~ is returned instead.
** Exceptions
   JavaScript provides an exception handling mechanism.
** Augmenting Types
   

